<!DOCTYPE html>
<html>
<head>
    <title>Game Map 2000x2000 with Ships</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background: #f0f0f0;
            font-family: Arial, sans-serif;
        }

        #mapCanvas {
            display: block;
            cursor: grab;
        }

        #mapCanvas:active {
            cursor: grabbing;
        }

        .controls {
            position: fixed;
            top: 10px;
            right: 10px;
            background: rgba(255, 255, 255, 0.95);
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            z-index: 1000;
            min-width: 250px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .controls h3 {
            margin: 0 0 10px 0;
            color: #333;
        }

        .stats {
            margin: 10px 0;
            font-size: 12px;
            color: #666;
        }

        .ship-info {
            margin: 8px 0;
            padding: 8px;
            border-radius: 4px;
            background: #f8f8f8;
            border-left: 3px solid #4CAF50;
        }

        .enemy-ship {
            border-left-color: #f44336;
        }

        button {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 8px 12px;
            margin: 4px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        button:hover {
            background: #45a049;
        }

        input[type="range"] {
            width: 100%;
            margin: 10px 0;
        }

        .coordinates {
            position: fixed;
            bottom: 10px;
            left: 10px;
            background: rgba(255, 255, 255, 0.9);
            padding: 8px 12px;
            border-radius: 4px;
            font-size: 12px;
            color: #333;
        }

        .legend {
            position: fixed;
            bottom: 10px;
            right: 10px;
            background: rgba(255, 255, 255, 0.9);
            padding: 8px 12px;
            border-radius: 4px;
            font-size: 12px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            margin: 4px 0;
        }

        .legend-color {
            width: 16px;
            height: 16px;
            margin-right: 8px;
            border-radius: 2px;
        }
    </style>
</head>
<body>
<div class="controls">
    <h3>üó∫Ô∏è –ö–∞—Ä—Ç–∞: {{ mapWidth }}√ó{{ mapHeight }}</h3>
    <div class="stats">
        ‚è±Ô∏è –¢–∏–∫: <span id="tick">{{ tick }}</span><br>
        üö¢ –ú–æ–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π: <span id="myShipsCount">{{ myShips|length }}</span><br>
        ‚öîÔ∏è –í—Ä–∞–∂–µ—Å–∫–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π: <span id="enemyShipsCount">{{ enemyShips|length }}</span><br>
        ü™® –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π: <span id="obstacleCount">{{ obstacles|length }}</span>
    </div>

    <div id="shipsList">
        <h4>–ú–æ–∏ –∫–æ—Ä–∞–±–ª–∏:</h4>
        {% for ship in myShips %}
            <div class="ship-info" data-ship-id="{{ ship.id }}">
                üö¢ #{{ loop.index }}: ({{ ship.x }}, {{ ship.y }})<br>
                HP: {{ ship.hp }}/{{ ship.size }} | üí®: {{ ship.speed }}
            </div>
        {% endfor %}

        {% if enemyShips|length > 0 %}
            <h4>–í—Ä–∞–∂–µ—Å–∫–∏–µ –∫–æ—Ä–∞–±–ª–∏:</h4>
            {% for ship in enemyShips %}
                <div class="ship-info enemy-ship" data-ship-id="{{ ship.id }}">
                    ‚öîÔ∏è #{{ loop.index }}: ({{ ship.x }}, {{ ship.y }})<br>
                    HP: {{ ship.hp }}/{{ ship.size }} | üí®: {{ ship.speed }}
                </div>
            {% endfor %}
        {% endif %}
    </div>

    <div>
        <button onclick="zoomIn()">‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å</button>
        <button onclick="zoomOut()">‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å</button>
        <button onclick="resetView()">üéØ –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å</button>
    </div>
    <div>
        <input type="range" id="zoomSlider" min="1" max="20" value="5" step="1">
        <div>–ú–∞—Å—à—Ç–∞–±: <span id="zoomLevel">5x</span></div>
    </div>
</div>

<div class="coordinates" id="coordinates">
    X: 0, Y: 0
</div>

<div class="legend">
    <div class="legend-item">
        <div class="legend-color" style="background: #8d6e63;"></div>
        <span>–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è</span>
    </div>
    <div class="legend-item">
        <div class="legend-color" style="background: #4CAF50;"></div>
        <span>–ú–æ–∏ –∫–æ—Ä–∞–±–ª–∏</span>
    </div>
    <div class="legend-item">
        <div class="legend-color" style="background: #f44336;"></div>
        <span>–í—Ä–∞–∂–µ—Å–∫–∏–µ –∫–æ—Ä–∞–±–ª–∏</span>
    </div>
    <div class="legend-item">
        <div class="legend-color" style="background: #2196F3;"></div>
        <span>–û–±–ª–∞—Å—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</span>
    </div>
    <div class="legend-item">
        <div class="legend-color" style="background: #FF9800;"></div>
        <span>–û–±–ª–∞—Å—Ç—å —Å—Ç—Ä–µ–ª—å–±—ã</span>
    </div>
</div>

<canvas id="mapCanvas"></canvas>

<script>
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const BASE_CELL_SIZE = 1;
    let scale = 5;
    let offsetX = 0;
    let offsetY = 0;
    let isDragging = false;
    let lastX, lastY;
    let lastDrawTime = 0;
    const DRAW_THROTTLE = 16;

    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const canvas = document.getElementById('mapCanvas');
    const ctx = canvas.getContext('2d');
    const zoomSlider = document.getElementById('zoomSlider');
    const zoomLevel = document.getElementById('zoomLevel');
    const coordsDisplay = document.getElementById('coordinates');

    // –î–∞–Ω–Ω—ã–µ –∏–∑ Twig
    const MAP_WIDTH = {{ mapWidth }};
    const MAP_HEIGHT = {{ mapHeight }};
    const OBSTACLES = {{ obstacles|json_encode|raw }};
    const MY_SHIPS = {{ myShips|json_encode|raw }};
    const ENEMY_SHIPS = {{ enemyShips|json_encode|raw }};
    let CURRENT_TICK = {{ tick }};

    // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä–∞–±–ª–µ–π
    const DIRECTIONS = {
        'north': { dx: 0, dy: -1, angle: -Math.PI/2 },
        'south': { dx: 0, dy: 1, angle: Math.PI/2 },
        'east': { dx: 1, dy: 0, angle: 0 },
        'west': { dx: -1, dy: 0, angle: Math.PI }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas
    function initCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        drawMap();
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    function drawMap() {
        const now = Date.now();
        if (now - lastDrawTime < DRAW_THROTTLE) {
            return;
        }
        lastDrawTime = now;

        requestAnimationFrame(() => {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ç–∫–∏
            drawGrid();

            // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
            drawObstacles();

            // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ—Ä–∞–±–ª–µ–π
            drawShips();

            // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–∞–¥–∏—É—Å–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è
            drawRadii();
        });
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ç–∫–∏
    function drawGrid() {
        const cellSize = BASE_CELL_SIZE * scale;
        const startX = Math.floor(offsetX / cellSize) * cellSize;
        const startY = Math.floor(offsetY / cellSize) * cellSize;

        ctx.strokeStyle = '#e0e0e0';
        ctx.lineWidth = 0.5;

        for (let x = startX; x < offsetX + canvas.width; x += cellSize * 10) {
            const screenX = (x - offsetX) * scale;
            ctx.beginPath();
            ctx.moveTo(screenX, 0);
            ctx.lineTo(screenX, canvas.height);
            ctx.stroke();
        }

        for (let y = startY; y < offsetY + canvas.height; y += cellSize * 10) {
            const screenY = (y - offsetY) * scale;
            ctx.beginPath();
            ctx.moveTo(0, screenY);
            ctx.lineTo(canvas.width, screenY);
            ctx.stroke();
        }
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
    function drawObstacles() {
        const cellSize = BASE_CELL_SIZE * scale;

        ctx.fillStyle = '#8d6e63';

        OBSTACLES.forEach(obstacle => {
            const startX = obstacle.start[0];
            const startY = obstacle.start[1];

            obstacle.map.forEach((row, localY) => {
                row.forEach((cell, localX) => {
                    if (cell === 1) {
                        const worldX = startX + localX;
                        const worldY = startY + localY;

                        const screenX = (worldX - offsetX) * scale;
                        const screenY = (worldY - offsetY) * scale;

                        if (screenX > -cellSize && screenX < canvas.width + cellSize &&
                            screenY > -cellSize && screenY < canvas.height + cellSize) {
                            ctx.fillRect(screenX, screenY, cellSize, cellSize);
                        }
                    }
                });
            });
        });
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ—Ä–∞–±–ª–µ–π
    function drawShips() {
        // –ú–æ–∏ –∫–æ—Ä–∞–±–ª–∏ (–∑–µ–ª–µ–Ω—ã–µ)
        MY_SHIPS.forEach(ship => {
            drawShip(ship, '#4CAF50');
        });

        // –í—Ä–∞–∂–µ—Å–∫–∏–µ –∫–æ—Ä–∞–±–ª–∏ (–∫—Ä–∞—Å–Ω—ã–µ)
        ENEMY_SHIPS.forEach(ship => {
            drawShip(ship, '#f44336');
        });
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
    function drawShip(ship, color) {
        const screenX = (ship.x - offsetX) * scale;
        const screenY = (ship.y - offsetY) * scale;
        const shipSize = ship.size * scale;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        if (screenX < -shipSize || screenX > canvas.width + shipSize ||
            screenY < -shipSize || screenY > canvas.height + shipSize) {
            return;
        }

        // –†–∏—Å—É–µ–º –∫–æ—Ä–∞–±–ª—å –∫–∞–∫ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        const direction = DIRECTIONS[ship.direction] || DIRECTIONS.south;

        ctx.save();
        ctx.translate(screenX + shipSize/2, screenY + shipSize/2);
        ctx.rotate(direction.angle);

        // –ö–æ—Ä–ø—É—Å –∫–æ—Ä–∞–±–ª—è
        ctx.fillStyle = color;
        ctx.beginPath();
        ctx.moveTo(shipSize/2, 0);
        ctx.lineTo(-shipSize/2, -shipSize/2);
        ctx.lineTo(-shipSize/2, shipSize/2);
        ctx.closePath();
        ctx.fill();

        // –û–±–≤–æ–¥–∫–∞
        ctx.strokeStyle = '#000';
        ctx.lineWidth = 1;
        ctx.stroke();

        // HP –±–∞—Ä
        const hpPercent = ship.hp / ship.size;
        ctx.fillStyle = hpPercent > 0.5 ? '#4CAF50' : hpPercent > 0.25 ? '#FF9800' : '#f44336';
        ctx.fillRect(-shipSize/2, -shipSize - 5, shipSize * hpPercent, 3);

        ctx.restore();

        // ID –∫–æ—Ä–∞–±–ª—è
        ctx.fillStyle = '#000';
        ctx.font = '10px Arial';
        ctx.fillText(ship.id.substring(0, 8), screenX, screenY - 10);
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–∞–¥–∏—É—Å–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è
    function drawRadii() {
        MY_SHIPS.forEach(ship => {
            drawShipRadii(ship, '#2196F3', '#FF9800');
        });

        ENEMY_SHIPS.forEach(ship => {
            drawShipRadii(ship, '#ff5252', '#ff7676');
        });
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–∞–¥–∏—É—Å–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
    function drawShipRadii(ship, scanColor, cannonColor) {
        const screenX = (ship.x - offsetX) * scale;
        const screenY = (ship.y - offsetY) * scale;

        // –†–∞–¥–∏—É—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        ctx.beginPath();
        ctx.arc(screenX, screenY, ship.scanRadius * scale, 0, 2 * Math.PI);
        ctx.strokeStyle = scanColor;
        ctx.lineWidth = 1;
        ctx.stroke();

        // –†–∞–¥–∏—É—Å —Å—Ç—Ä–µ–ª—å–±—ã
        ctx.beginPath();
        ctx.arc(screenX, screenY, ship.cannonRadius * scale, 0, 2 * Math.PI);
        ctx.strokeStyle = cannonColor;
        ctx.lineWidth = 2;
        ctx.stroke();

        // –ö–î —Å—Ç—Ä–µ–ª—å–±—ã
        if (ship.cannonCooldownLeft > 0) {
            ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';
            ctx.beginPath();
            ctx.arc(screenX, screenY, ship.cannonRadius * scale, 0, 2 * Math.PI);
            ctx.fill();

            ctx.fillStyle = '#fff';
            ctx.font = '12px Arial';
            ctx.textAlign = 'center';
            ctx.fillText(ship.cannonCooldownLeft.toString(), screenX, screenY + 4);
        }
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    canvas.addEventListener('mousedown', (e) => {
        isDragging = true;
        lastX = e.clientX;
        lastY = e.clientY;
        canvas.style.cursor = 'grabbing';
    });

    canvas.addEventListener('mousemove', (e) => {
        const rect = canvas.getBoundingClientRect();
        const mouseX = e.clientX - rect.left;
        const mouseY = e.clientY - rect.top;
        const worldX = Math.floor(offsetX + mouseX / scale);
        const worldY = Math.floor(offsetY + mouseY / scale);

        coordsDisplay.textContent = `X: ${worldX}, Y: ${worldY}`;

        if (isDragging) {
            const deltaX = (e.clientX - lastX) / scale;
            const deltaY = (e.clientY - lastY) / scale;

            offsetX -= deltaX;
            offsetY -= deltaY;

            offsetX = Math.max(0, Math.min(offsetX, MAP_WIDTH - canvas.width / scale));
            offsetY = Math.max(0, Math.min(offsetY, MAP_HEIGHT - canvas.height / scale));

            lastX = e.clientX;
            lastY = e.clientY;

            drawMap();
        }
    });

    canvas.addEventListener('mouseup', () => {
        isDragging = false;
        canvas.style.cursor = 'grab';
    });

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    canvas.addEventListener('mouseleave', () => {
        isDragging = false;
        canvas.style.cursor = 'default';
    });

    canvas.addEventListener('wheel', (e) => {
        e.preventDefault();

        const rect = canvas.getBoundingClientRect();
        const mouseX = e.clientX - rect.left;
        const mouseY = e.clientY - rect.top;

        const worldX = offsetX + mouseX / scale;
        const worldY = offsetY + mouseY / scale;

        if (e.deltaY < 0) {
            scale = Math.min(20, scale + 1);
        } else {
            scale = Math.max(1, scale - 1);
        }

        offsetX = worldX - mouseX / scale;
        offsetY = worldY - mouseY / scale;

        updateZoomUI();
        drawMap();
    });

    function zoomIn() {
        scale = Math.min(20, scale + 1);
        updateZoomUI();
        drawMap();
    }

    function zoomOut() {
        scale = Math.max(1, scale - 1);
        updateZoomUI();
        drawMap();
    }

    function resetView() {
        scale = 5;
        offsetX = MAP_WIDTH / 2 - canvas.width / (2 * scale);
        offsetY = MAP_HEIGHT / 2 - canvas.height / (2 * scale);
        updateZoomUI();
        drawMap();
    }

    function updateZoomUI() {
        zoomSlider.value = scale;
        zoomLevel.textContent = scale + 'x';
    }

    zoomSlider.addEventListener('input', (e) => {
        scale = parseInt(e.target.value);
        updateZoomUI();
        drawMap();
    });

    window.addEventListener('resize', () => {
        initCanvas();
    });

    document.addEventListener('keydown', (e) => {
        switch(e.key) {
            case '+':
            case '=':
                zoomIn();
                break;
            case '-':
                zoomOut();
                break;
            case '0':
                resetView();
                break;
            case 'ArrowLeft':
                offsetX -= 50 / scale;
                drawMap();
                break;
            case 'ArrowRight':
                offsetX += 50 / scale;
                drawMap();
                break;
            case 'ArrowUp':
                offsetY -= 50 / scale;
                drawMap();
                break;
            case 'ArrowDown':
                offsetY += 50 / scale;
                drawMap();
                break;
        }
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    window.addEventListener('load', () => {
        initCanvas();
        resetView();
        updateZoomUI();

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–≤–æ–∏—Ö –∫–æ—Ä–∞–±–ª—è—Ö
        if (MY_SHIPS.length > 0) {
            const firstShip = MY_SHIPS[0];
            offsetX = firstShip.x - canvas.width / (2 * scale);
            offsetY = firstShip.y - canvas.height / (2 * scale);
            drawMap();
        }
    });
</script>
</body>
</html>
