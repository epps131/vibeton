<!DOCTYPE html>
<html>
<head>
    <title>Game Map 2000x2000 with Ships</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background: #f0f0f0;
            font-family: Arial, sans-serif;
        }

        #mapCanvas {
            display: block;
            cursor: grab;
        }

        #mapCanvas:active {
            cursor: grabbing;
        }

        .controls {
            position: fixed;
            top: 10px;
            right: 10px;
            background: rgba(255, 255, 255, 0.98);
            padding: 12px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
            z-index: 1000;
            width: 220px;
            max-height: 80vh;
            overflow-y: auto;
            font-size: 12px;
        }

        .controls h3 {
            margin: 0 0 8px 0;
            color: #333;
            font-size: 14px;
        }

        .stats {
            margin: 8px 0;
            color: #666;
            line-height: 1.4;
        }

        .ship-info {
            margin: 6px 0;
            padding: 6px;
            border-radius: 4px;
            background: #f8f8f8;
            border-left: 3px solid #4CAF50;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 11px;
            line-height: 1.3;
        }

        .ship-info:hover {
            background: #e8f5e9;
            transform: translateX(2px);
        }

        .ship-info.selected {
            background: #4CAF50;
            color: white;
            border-left: 3px solid #2E7D32;
        }

        .enemy-ship {
            border-left-color: #f44336;
        }

        .enemy-ship:hover {
            background: #ffebee;
        }

        .enemy-ship.selected {
            background: #f44336;
            color: white;
            border-left: 3px solid #c62828;
        }

        .controls-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 4px;
            margin: 8px 0;
        }

        button {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 6px 8px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 11px;
            white-space: nowrap;
        }

        button:hover {
            background: #45a049;
        }

        .zoom-controls {
            margin: 8px 0;
        }

        input[type="range"] {
            width: 100%;
            margin: 6px 0;
        }

        .coordinates {
            position: fixed;
            bottom: 10px;
            left: 10px;
            background: rgba(255, 255, 255, 0.9);
            padding: 6px 10px;
            border-radius: 4px;
            font-size: 11px;
            color: #333;
        }

        .legend {
            position: fixed;
            bottom: 10px;
            right: 240px;
            background: rgba(255, 255, 255, 0.9);
            padding: 6px 10px;
            border-radius: 4px;
            font-size: 11px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            margin: 3px 0;
        }

        .legend-color {
            width: 12px;
            height: 12px;
            margin-right: 6px;
            border-radius: 2px;
        }

        .selected-ship {
            position: fixed;
            top: 10px;
            left: 10px;
            background: rgba(255, 255, 255, 0.95);
            padding: 10px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
            z-index: 1000;
            max-width: 250px;
            font-size: 11px;
        }

        #shipsList {
            max-height: 200px;
            overflow-y: auto;
            margin: 8px 0;
        }

        #shipsList h4 {
            margin: 8px 0 4px 0;
            font-size: 12px;
        }

        .border-warning {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(255, 165, 0, 0.9);
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            font-size: 14px;
            z-index: 2000;
            display: none;
        }
    </style>
</head>
<body>
<div class="controls">
    <h3>üó∫Ô∏è –ö–∞—Ä—Ç–∞: {{ mapWidth }}√ó{{ mapHeight }}</h3>
    <div class="stats">
        ‚è±Ô∏è –¢–∏–∫: <span id="tick">{{ tick }}</span><br>
        üö¢ –ú–æ–∏—Ö: <span id="myShipsCount">{{ myShips|length }}</span><br>
        ‚öîÔ∏è –í—Ä–∞–≥–æ–≤: <span id="enemyShipsCount">{{ enemyShips|length }}</span><br>
        ü™® –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π: <span id="obstacleCount">{{ obstacles|length }}</span>
    </div>

    <div id="shipsList">
        <h4>–ú–æ–∏ –∫–æ—Ä–∞–±–ª–∏:</h4>
        {% for ship in myShips %}
            <div class="ship-info" data-ship-id="{{ ship.id }}" onclick="centerOnShip('{{ ship.id }}')">
                üö¢ #{{ loop.index }}: ({{ ship.x }}, {{ ship.y }})<br>
                HP: {{ ship.hp }}/{{ ship.size }} | üí®: {{ ship.speed }}
            </div>
        {% endfor %}

        {% if enemyShips|length > 0 %}
            <h4>–í—Ä–∞–∂–µ—Å–∫–∏–µ:</h4>
            {% for ship in enemyShips %}
                <div class="ship-info enemy-ship" data-ship-id="{{ ship.id }}" onclick="centerOnShip('{{ ship.id }}')">
                    ‚öîÔ∏è #{{ loop.index }}: ({{ ship.x }}, {{ ship.y }})<br>
                    HP: {{ ship.hp }}/{{ ship.size }} | üí®: {{ ship.speed }}
                </div>
            {% endfor %}
        {% endif %}
    </div>

    <div class="controls-buttons">
        <button onclick="zoomIn()">‚ûï</button>
        <button onclick="zoomOut()">‚ûñ</button>
        <button onclick="resetView()">üéØ</button>
        <button onclick="centerOnAllShips()">üëÅÔ∏è</button>
    </div>

    <div class="zoom-controls">
        <input type="range" id="zoomSlider" min="1" max="20" value="5" step="1">
        <div>–ú–∞—Å—à—Ç–∞–±: <span id="zoomLevel">5x</span></div>
    </div>
</div>

<div class="selected-ship" id="selectedShipInfo" style="display: none;">
    <h4>–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ—Ä–∞–±–ª—å</h4>
    <div id="selectedShipDetails"></div>
</div>

<div class="coordinates" id="coordinates">
    X: 0, Y: 0
</div>

<div class="legend">
    <div class="legend-item">
        <div class="legend-color" style="background: #8d6e63;"></div>
        <span>–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è</span>
    </div>
    <div class="legend-item">
        <div class="legend-color" style="background: #4CAF50;"></div>
        <span>–ú–æ–∏ –∫–æ—Ä–∞–±–ª–∏</span>
    </div>
    <div class="legend-item">
        <div class="legend-color" style="background: #f44336;"></div>
        <span>–í—Ä–∞–∂–µ—Å–∫–∏–µ –∫–æ—Ä–∞–±–ª–∏</span>
    </div>
</div>

<div class="border-warning" id="borderWarning">
    ‚ö†Ô∏è –ö–æ—Ä–∞–±–ª—å —É –∫—Ä–∞—è –∫–∞—Ä—Ç—ã
</div>

<canvas id="mapCanvas"></canvas>

<script>
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const BASE_CELL_SIZE = 1;
    let scale = 5;
    let offsetX = 0;
    let offsetY = 0;
    let isDragging = false;
    let lastX, lastY;
    let lastDrawTime = 0;
    const DRAW_THROTTLE = 16;
    let selectedShipId = null;

    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const canvas = document.getElementById('mapCanvas');
    const ctx = canvas.getContext('2d');
    const zoomSlider = document.getElementById('zoomSlider');
    const zoomLevel = document.getElementById('zoomLevel');
    const coordsDisplay = document.getElementById('coordinates');
    const selectedShipInfo = document.getElementById('selectedShipInfo');
    const selectedShipDetails = document.getElementById('selectedShipDetails');
    const borderWarning = document.getElementById('borderWarning');

    // –î–∞–Ω–Ω—ã–µ –∏–∑ Twig
    const MAP_WIDTH = {{ mapWidth }};
    const MAP_HEIGHT = {{ mapHeight }};
    const OBSTACLES = {{ obstacles|json_encode|raw }};
    const MY_SHIPS = {{ myShips|json_encode|raw }};
    const ENEMY_SHIPS = {{ enemyShips|json_encode|raw }};
    let CURRENT_TICK = {{ tick }};

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    const ALL_SHIPS = [...MY_SHIPS, ...ENEMY_SHIPS];

    // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä–∞–±–ª–µ–π
    const DIRECTIONS = {
        'north': { dx: 0, dy: -1, angle: -Math.PI/2 },
        'south': { dx: 0, dy: 1, angle: Math.PI/2 },
        'east': { dx: 1, dy: 0, angle: 0 },
        'west': { dx: -1, dy: 0, angle: Math.PI }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas
    function initCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        drawMap();
    }

    // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ä–∞–±–ª–µ (–ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è –∫—Ä–∞–µ–≤ –∫–∞—Ä—Ç—ã)
    function centerOnShip(shipId) {
        const ship = ALL_SHIPS.find(s => s.id === shipId);
        if (ship) {
            // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            let targetX = ship.x - canvas.width / (2 * scale);
            let targetY = ship.y - canvas.height / (2 * scale);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–æ—Ä–∞–±–ª—å —É –∫—Ä–∞—è –∫–∞—Ä—Ç—ã
            const isAtLeftEdge = ship.x < canvas.width / (2 * scale);
            const isAtRightEdge = ship.x > MAP_WIDTH - canvas.width / (2 * scale);
            const isAtTopEdge = ship.y < canvas.height / (2 * scale);
            const isAtBottomEdge = ship.y > MAP_HEIGHT - canvas.height / (2 * scale);

            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–ª—è –∫—Ä–∞–µ–≤ –∫–∞—Ä—Ç—ã
            if (isAtLeftEdge) {
                targetX = 0;
                showBorderWarning('left');
            } else if (isAtRightEdge) {
                targetX = MAP_WIDTH - canvas.width / scale;
                showBorderWarning('right');
            } else {
                hideBorderWarning();
            }

            if (isAtTopEdge) {
                targetY = 0;
                showBorderWarning('top');
            } else if (isAtBottomEdge) {
                targetY = MAP_HEIGHT - canvas.height / scale;
                showBorderWarning('bottom');
            } else {
                hideBorderWarning();
            }

            // –ü–ª–∞–≤–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            animatePanTo(targetX, targetY);

            selectShip(shipId);
        }
    }

    // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    function animatePanTo(targetX, targetY, duration = 500) {
        const startX = offsetX;
        const startY = offsetY;
        const startTime = Date.now();

        function animate() {
            const currentTime = Date.now();
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);

            // easing function
            const easeProgress = 1 - Math.pow(1 - progress, 3);

            offsetX = startX + (targetX - startX) * easeProgress;
            offsetY = startY + (targetY - startY) * easeProgress;

            drawMap();

            if (progress < 1) {
                requestAnimationFrame(animate);
            }
        }

        animate();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫—Ä–∞–µ –∫–∞—Ä—Ç—ã
    function showBorderWarning(side) {
        const messages = {
            'left': '‚ö†Ô∏è –ö–æ—Ä–∞–±–ª—å —É –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è',
            'right': '‚ö†Ô∏è –ö–æ—Ä–∞–±–ª—å —É –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è',
            'top': '‚ö†Ô∏è –ö–æ—Ä–∞–±–ª—å —É –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è',
            'bottom': '‚ö†Ô∏è –ö–æ—Ä–∞–±–ª—å —É –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è'
        };

        borderWarning.textContent = messages[side] || '‚ö†Ô∏è –ö–æ—Ä–∞–±–ª—å —É –∫—Ä–∞—è –∫–∞—Ä—Ç—ã';
        borderWarning.style.display = 'block';

        setTimeout(hideBorderWarning, 3000);
    }

    function hideBorderWarning() {
        borderWarning.style.display = 'none';
    }

    // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö –∫–æ—Ä–∞–±–ª—è—Ö
    function centerOnAllShips() {
        if (ALL_SHIPS.length === 0) return;

        let minX = Infinity, maxX = -Infinity, minY = Infinity, maxY = -Infinity;

        ALL_SHIPS.forEach(ship => {
            minX = Math.min(minX, ship.x);
            maxX = Math.max(maxX, ship.x);
            minY = Math.min(minY, ship.y);
            maxY = Math.max(maxY, ship.y);
        });

        const padding = 100;
        minX = Math.max(0, minX - padding);
        maxX = Math.min(MAP_WIDTH, maxX + padding);
        minY = Math.max(0, minY - padding);
        maxY = Math.min(MAP_HEIGHT, maxY + padding);

        const width = maxX - minX;
        const height = maxY - minY;

        const scaleX = canvas.width / width;
        const scaleY = canvas.height / height;

        scale = Math.min(scaleX, scaleY, 15); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±
        scale = Math.max(scale, 1);

        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–µ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã
        offsetX = Math.max(0, Math.min(minX, MAP_WIDTH - canvas.width / scale));
        offsetY = Math.max(0, Math.min(minY, MAP_HEIGHT - canvas.height / scale));

        selectShip(null);
        updateZoomUI();
        drawMap();
    }

    // –í—ã–±–æ—Ä –∫–æ—Ä–∞–±–ª—è
    function selectShip(shipId) {
        selectedShipId = shipId;

        document.querySelectorAll('.ship-info').forEach(el => {
            el.classList.remove('selected');
        });

        if (shipId) {
            const shipElement = document.querySelector(`[data-ship-id="${shipId}"]`);
            if (shipElement) {
                shipElement.classList.add('selected');
                shipElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            }

            const ship = ALL_SHIPS.find(s => s.id === shipId);
            if (ship) {
                selectedShipDetails.innerHTML = `
                        <strong>${ship.id.substring(0, 12)}...</strong><br>
                        –ü–æ–∑–∏—Ü–∏—è: (${ship.x}, ${ship.y})<br>
                        HP: ${ship.hp}/${ship.size}<br>
                        –°–∫–æ—Ä–æ—Å—Ç—å: ${ship.speed}<br>
                        –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${ship.direction}
                    `;
                selectedShipInfo.style.display = 'block';
            }
        } else {
            selectedShipInfo.style.display = 'none';
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ canvas
    canvas.addEventListener('click', (e) => {
        if (isDragging) return;

        const rect = canvas.getBoundingClientRect();
        const mouseX = e.clientX - rect.left;
        const mouseY = e.clientY - rect.top;

        const worldX = offsetX + mouseX / scale;
        const worldY = offsetY + mouseY / scale;

        const clickedShip = ALL_SHIPS.find(ship => {
            const distance = Math.sqrt(
                Math.pow(ship.x - worldX, 2) +
                Math.pow(ship.y - worldY, 2)
            );
            return distance < Math.max(10, ship.size * 2); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∫–ª–∏–∫–∞
        });

        if (clickedShip) {
            centerOnShip(clickedShip.id);
        } else {
            selectShip(null);
            hideBorderWarning();
        }
    });

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    function drawMap() {
        const now = Date.now();
        if (now - lastDrawTime < DRAW_THROTTLE) {
            return;
        }
        lastDrawTime = now;

        requestAnimationFrame(() => {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawGrid();
            drawObstacles();
            drawShips();
            drawRadii();

            if (selectedShipId) {
                highlightSelectedShip();
            }

            // –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã
            drawMapBounds();
        });
    }

    // –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã
    function drawMapBounds() {
        ctx.strokeStyle = '#ff0000';
        ctx.lineWidth = 2;
        ctx.setLineDash([5, 5]);

        // –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
        if (offsetX <= 0) {
            ctx.beginPath();
            ctx.moveTo(0, 0);
            ctx.lineTo(0, canvas.height);
            ctx.stroke();
        }

        // –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
        const rightEdge = (MAP_WIDTH - offsetX) * scale;
        if (rightEdge >= canvas.width - 2) {
            ctx.beginPath();
            ctx.moveTo(canvas.width, 0);
            ctx.lineTo(canvas.width, canvas.height);
            ctx.stroke();
        }

        // –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        if (offsetY <= 0) {
            ctx.beginPath();
            ctx.moveTo(0, 0);
            ctx.lineTo(canvas.width, 0);
            ctx.stroke();
        }

        // –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        const bottomEdge = (MAP_HEIGHT - offsetY) * scale;
        if (bottomEdge >= canvas.height - 2) {
            ctx.beginPath();
            ctx.moveTo(0, canvas.height);
            ctx.lineTo(canvas.width, canvas.height);
            ctx.stroke();
        }

        ctx.setLineDash([]);
    }

    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
    function highlightSelectedShip() {
        const ship = ALL_SHIPS.find(s => s.id === selectedShipId);
        if (!ship) return;

        const screenX = (ship.x - offsetX) * scale;
        const screenY = (ship.y - offsetY) * scale;
        const shipSize = ship.size * scale;

        ctx.save();
        ctx.beginPath();
        ctx.arc(screenX + shipSize/2, screenY + shipSize/2, shipSize * 1.5, 0, 2 * Math.PI);
        ctx.strokeStyle = '#FFD700';
        ctx.lineWidth = 2;
        ctx.setLineDash([5, 3]);
        ctx.stroke();
        ctx.setLineDash([]);
        ctx.restore();
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    function drawGrid() {
        const cellSize = BASE_CELL_SIZE * scale;
        const startX = Math.floor(offsetX / cellSize) * cellSize;
        const startY = Math.floor(offsetY / cellSize) * cellSize;

        ctx.strokeStyle = '#e0e0e0';
        ctx.lineWidth = 0.5;

        for (let x = startX; x < offsetX + canvas.width / scale; x += cellSize * 10) {
            const screenX = (x - offsetX) * scale;
            if (screenX >= 0 && screenX <= canvas.width) {
                ctx.beginPath();
                ctx.moveTo(screenX, 0);
                ctx.lineTo(screenX, canvas.height);
                ctx.stroke();
            }
        }

        for (let y = startY; y < offsetY + canvas.height / scale; y += cellSize * 10) {
            const screenY = (y - offsetY) * scale;
            if (screenY >= 0 && screenY <= canvas.height) {
                ctx.beginPath();
                ctx.moveTo(0, screenY);
                ctx.lineTo(canvas.width, screenY);
                ctx.stroke();
            }
        }
    }

    function drawObstacles() {
        const cellSize = BASE_CELL_SIZE * scale;

        ctx.fillStyle = '#8d6e63';

        OBSTACLES.forEach(obstacle => {
            const startX = obstacle.start[0];
            const startY = obstacle.start[1];

            obstacle.map.forEach((row, localY) => {
                row.forEach((cell, localX) => {
                    if (cell === 1) {
                        const worldX = startX + localX;
                        const worldY = startY + localY;

                        const screenX = (worldX - offsetX) * scale;
                        const screenY = (worldY - offsetY) * scale;

                        if (screenX >= -cellSize && screenX <= canvas.width + cellSize &&
                            screenY >= -cellSize && screenY <= canvas.height + cellSize) {
                            ctx.fillRect(screenX, screenY, cellSize, cellSize);
                        }
                    }
                });
            });
        });
    }

    function drawShips() {
        MY_SHIPS.forEach(ship => {
            drawShip(ship, '#4CAF50');
        });

        ENEMY_SHIPS.forEach(ship => {
            drawShip(ship, '#f44336');
        });
    }

    function drawShip(ship, color) {
        const screenX = (ship.x - offsetX) * scale;
        const screenY = (ship.y - offsetY) * scale;
        const shipSize = ship.size * scale;

        if (screenX < -shipSize || screenX > canvas.width + shipSize ||
            screenY < -shipSize || screenY > canvas.height + shipSize) {
            return;
        }

        const direction = DIRECTIONS[ship.direction] || DIRECTIONS.south;

        ctx.save();
        ctx.translate(screenX + shipSize/2, screenY + shipSize/2);
        ctx.rotate(direction.angle);

        ctx.fillStyle = color;
        ctx.beginPath();
        ctx.moveTo(shipSize/2, 0);
        ctx.lineTo(-shipSize/2, -shipSize/2);
        ctx.lineTo(-shipSize/2, shipSize/2);
        ctx.closePath();
        ctx.fill();

        ctx.strokeStyle = '#000';
        ctx.lineWidth = 1;
        ctx.stroke();

        const hpPercent = ship.hp / ship.size;
        ctx.fillStyle = hpPercent > 0.5 ? '#4CAF50' : hpPercent > 0.25 ? '#FF9800' : '#f44336';
        ctx.fillRect(-shipSize/2, -shipSize - 4, shipSize * hpPercent, 2);

        ctx.restore();
    }

    function drawRadii() {
        MY_SHIPS.forEach(ship => {
            drawShipRadii(ship, '#2196F3', '#FF9800');
        });

        ENEMY_SHIPS.forEach(ship => {
            drawShipRadii(ship, '#ff5252', '#ff7676');
        });
    }

    function drawShipRadii(ship, scanColor, cannonColor) {
        const screenX = (ship.x - offsetX) * scale;
        const screenY = (ship.y - offsetY) * scale;

        if (screenX < -ship.scanRadius * scale || screenX > canvas.width + ship.scanRadius * scale ||
            screenY < -ship.scanRadius * scale || screenY > canvas.height + ship.scanRadius * scale) {
            return;
        }

        ctx.beginPath();
        ctx.arc(screenX, screenY, ship.scanRadius * scale, 0, 2 * Math.PI);
        ctx.strokeStyle = scanColor;
        ctx.lineWidth = 1;
        ctx.stroke();

        ctx.beginPath();
        ctx.arc(screenX, screenY, ship.cannonRadius * scale, 0, 2 * Math.PI);
        ctx.strokeStyle = cannonColor;
        ctx.lineWidth = 1.5;
        ctx.stroke();
    }

    // –§—É–Ω–∫—Ü–∏–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    function zoomIn() {
        scale = Math.min(20, scale + 1);
        updateZoomUI();
        drawMap();
    }

    function zoomOut() {
        scale = Math.max(1, scale - 1);
        updateZoomUI();
        drawMap();
    }

    function resetView() {
        scale = 5;
        offsetX = Math.max(0, Math.min(MAP_WIDTH / 2 - canvas.width / (2 * scale), MAP_WIDTH - canvas.width / scale));
        offsetY = Math.max(0, Math.min(MAP_HEIGHT / 2 - canvas.height / (2 * scale), MAP_HEIGHT - canvas.height / scale));
        updateZoomUI();
        drawMap();
    }

    function updateZoomUI() {
        if (zoomSlider) zoomSlider.value = scale;
        if (zoomLevel) zoomLevel.textContent = scale + 'x';
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    canvas.addEventListener('mousedown', (e) => {
        isDragging = true;
        lastX = e.clientX;
        lastY = e.clientY;
        canvas.style.cursor = 'grabbing';
        hideBorderWarning();
    });

    canvas.addEventListener('mousemove', (e) => {
        const rect = canvas.getBoundingClientRect();
        const mouseX = e.clientX - rect.left;
        const mouseY = e.clientY - rect.top;
        const worldX = Math.floor(offsetX + mouseX / scale);
        const worldY = Math.floor(offsetY + mouseY / scale);

        coordsDisplay.textContent = `X: ${worldX}, Y: ${worldY}`;

        if (isDragging) {
            const deltaX = (e.clientX - lastX) / scale;
            const deltaY = (e.clientY - lastY) / scale;

            offsetX -= deltaX;
            offsetY -= deltaY;

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞
            offsetX = Math.max(0, Math.min(offsetX, MAP_WIDTH - canvas.width / scale));
            offsetY = Math.max(0, Math.min(offsetY, MAP_HEIGHT - canvas.height / scale));

            lastX = e.clientX;
            lastY = e.clientY;

            drawMap();
        }
    });

    canvas.addEventListener('mouseup', () => {
        isDragging = false;
        canvas.style.cursor = 'grab';
    });

    canvas.addEventListener('mouseleave', () => {
        isDragging = false;
        canvas.style.cursor = 'default';
    });

    canvas.addEventListener('wheel', (e) => {
        e.preventDefault();

        const rect = canvas.getBoundingClientRect();
        const mouseX = e.clientX - rect.left;
        const mouseY = e.clientY - rect.top;

        const worldX = offsetX + mouseX / scale;
        const worldY = offsetY + mouseY / scale;

        if (e.deltaY < 0) {
            scale = Math.min(20, scale + 1);
        } else {
            scale = Math.max(1, scale - 1);
        }

        offsetX = worldX - mouseX / scale;
        offsetY = worldY - mouseY / scale;

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
        offsetX = Math.max(0, Math.min(offsetX, MAP_WIDTH - canvas.width / scale));
        offsetY = Math.max(0, Math.min(offsetY, MAP_HEIGHT - canvas.height / scale));

        updateZoomUI();
        drawMap();
    });

    if (zoomSlider) {
        zoomSlider.addEventListener('input', (e) => {
            const oldScale = scale;
            scale = parseInt(e.target.value);

            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º offset –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å—à—Ç–∞–±–∞
            const ratio = scale / oldScale;
            offsetX = offsetX * ratio;
            offsetY = offsetY * ratio;

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
            offsetX = Math.max(0, Math.min(offsetX, MAP_WIDTH - canvas.width / scale));
            offsetY = Math.max(0, Math.min(offsetY, MAP_HEIGHT - canvas.height / scale));

            updateZoomUI();
            drawMap();
        });
    }

    window.addEventListener('resize', () => {
        initCanvas();
        drawMap();
    });

    document.addEventListener('keydown', (e) => {
        switch(e.key) {
            case '+':
            case '=':
                zoomIn();
                break;
            case '-':
                zoomOut();
                break;
            case '0':
                resetView();
                break;
            case 'ArrowLeft':
                offsetX = Math.max(0, offsetX - 100 / scale);
                drawMap();
                break;
            case 'ArrowRight':
                offsetX = Math.min(MAP_WIDTH - canvas.width / scale, offsetX + 100 / scale);
                drawMap();
                break;
            case 'ArrowUp':
                offsetY = Math.max(0, offsetY - 100 / scale);
                drawMap();
                break;
            case 'ArrowDown':
                offsetY = Math.min(MAP_HEIGHT - canvas.height / scale, offsetY + 100 / scale);
                drawMap();
                break;
        }
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    window.addEventListener('load', () => {
        initCanvas();
        resetView();
        updateZoomUI();
    });
</script>
</body>
</html>
